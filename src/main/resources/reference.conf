akka {
  actor {
    serializers {
      com-github-mwegrz-scalautil-store-actor-key-value-store-add = "com.github.mwegrz.scalautil.store.ActorKeyValueStore$Add$AkkaSerializer"
      com-github-mwegrz-scalautil-store-actor-key-value-store-delete = "com.github.mwegrz.scalautil.store.ActorKeyValueStore$Delete$AkkaSerializer"
      com-github-mwegrz-scalautil-store-actor-key-value-store-state = "com.github.mwegrz.scalautil.store.ActorKeyValueStore$State$AkkaSerializer"
    }
    serialization-identifiers {
      "com.github.mwegrz.scalautil.store.ActorKeyValueStore$Add$AkkaSerializer" = 141
      "com.github.mwegrz.scalautil.store.ActorKeyValueStore$Delete$AkkaSerializer" = 142
      "com.github.mwegrz.scalautil.store.ActorKeyValueStore$State$AkkaSerializer" = 143
    }
    serialization-bindings {
      "com.github.mwegrz.scalautil.store.ActorKeyValueStore$Add" = com-github-mwegrz-scalautil-store-actor-key-value-store-add
      "com.github.mwegrz.scalautil.store.ActorKeyValueStore$Delete" = com-github-mwegrz-scalautil-store-actor-key-value-store-delete
      "com.github.mwegrz.scalautil.store.ActorKeyValueStore$State" = com-github-mwegrz-scalautil-store-actor-key-value-store-state
    }
  }
  stream.restart-policy {
    idle-timeout = 30s
    min-backoff = 1s
    max-backoff = 30s
    random-factor = 0.2
    max-restarts = -1
  }
}
file-system-client {
  url = ""
  username = ""
  password = ""
  connection-timeout = 5s
  max-pool-size = 1
  max-idle = 1
  min-idle = 1
  min-idle = 1
  idle-timeout = 10m
  max-lifetime = 30m
  temporary-file-dir = automatic
}
http-server {
  host = "0.0.0.0"
  port = 8080
  base-path = null

  authentication {

  }
}
cassandra-client {
  contact-points = ["0.0.0.0"]
  port = 9042
  reconnection-policy {
    base-delay = 1s
    max-delay = 30s
  }
}
mqtt-client {
  host = "localhost"
  port = 1883
  client-id = null
  username = "mqtt-client"
  password = "mqtt-client"
  clean-session = true,
  automatic-reconnect = true,
  keep-alive-interval = 60s
  parallelism = null
}
pulsar-client {
  url = "pulsar://localhost:6650"
  restart-policy {
    idle-timeout = 30s
    min-backoff = 1s
    max-backoff = 30s
    random-factor = 0.2
    max-restarts = -1
  }
}
sql-database-client {

  # A JDBC URL of a target database. When using this property with "old" drivers, you may also need to set the
  # `driver-class-name` property, but try it first without.
  url = ""

  # This property sets the default authentication username used when obtaining `Connection`s from the underlying driver
  # and will be set as an user property in the Properties passed to the driver's
  # `DriverManager.getConnection(jdbcUrl, props)` call.
  username = ""

  # This property sets the default authentication password used when obtaining `Connection`s from the underlying driver
  # and will be set as an user property in the Properties passed to the driver's
  # `DriverManager.getConnection(jdbcUrl, props)` call.
  password = ""

  # Properties to be passed to the database while acquiring connections.
  properties {}

  # This property controls the default auto-commit behavior of connections returned from the pool.
  auto-commit = true

  # This property controls the maximum amount of time that a client (that's you) will wait for a connection from the
  # pool. If this time is exceeded without a connection becoming available, a `SQLException` will be thrown. 1000ms is the
  # minimum value.
  connection-timeout = 5s

  # This property controls the maximum amount of time that a connection is allowed to sit idle in the pool. Whether a
  # connection is retired as idle or not is subject to a maximum variation of +30s, and average variation of
  # +15s. A connection will never be retired as idle before this timeout. A value of 0s means that idle
  # connections are never removed from the pool.
  idle-timeout = 10m

  # This property controls the maximum lifetime of a connection in the pool. When a connection reaches this timeout it
  # will be retired from the pool, subject to a maximum variation of +30s. An in-use connection will never be
  # retired, only when it is closed will it then be removed. We strongly recommend setting this value, and it should be
  # at least 30s less than any database-level connection timeout. A value of 0s indicates no maximum lifetime
  # (infinite lifetime), subject of course to the idleTimeout setting.
  max-lifetime = 30m

  # If your driver supports JDBC4 it is strongly recommended not setting this property. This is for "legacy" databases that
  # do not support the JDBC4 Connection.isValid() API. This is the query that will be executed just before a connection
  # is given to you from the pool to validate that the connection to the database is still alive. Again, try running
  # the pool without this property, an error will be logged if your driver is not JDBC4 compliant to let you know.
  connection-test-query = ""

  # If asynchronous version of the `SqlDatabase` is used this section configures the executor for running database
  # statements
  async-executor {
    # A prefix to use for the names of the created threads.
    name = "sql-database"

    # The number of concurrent threads in the thread pool for asynchronous execution of database actions. See the
    # [[https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing HikariCP wiki]] for more information about
    # sizing the thread pool correctly. Note that for asynchronous execution you should tune the thread pool size (this
    # parameter) accordingly instead of the maximum-pool-size. Additionally, `max-pool-size` and `min-idle` properties will
    # be set to the same value.
    thread-pool-size = 1

    # The size of the queue for database actions which cannot be executed immediately when all threads are busy. Beyond
    # this limit new actions fail immediately. Set to 0 for no queue (direct hand-off) or to `unlimited` for an unlimited queue
    # size (not recommended).
    queue-size = 1000
  }

  # This property controls the maximum size that the pool is allowed to reach, including both idle and in-use
  # connections. Basically this value will determine the maximum number of actual connections to the database backend.
  # A reasonable value for this is best determined by your execution environment. When the pool reaches this size, and
  # no idle connections are available, calls to getConnection() will block for up to connection-timeout milliseconds
  # before timing out.
  max-pool-size = 1

  # This property controls the minimum number of idle connections that are maintained in the pool.
  # If the idle connections dip below this value, the pool will make a best effort to add additional connections quickly
  # and efficiently. However, for maximum performance and responsiveness to spike demands, we recommend setting this
  # value to `unlimited` and allowing the pool to act as a fixed size connection pool.
  min-idle = 1

  # This property represents an user-defined name for the connection pool and appears mainly in logging and JMX
  # management consoles to identify pools and pool configurations.
  pool-name = "sql-database"

  # This property controls whether the pool will "fail fast" if the pool cannot be seeded with initial connections
  # successfully. If you want your application to start even when the database is down/unavailable, set this property to
  # false.
  initialization-fail-fast = true

  # This property determines whether the pool isolates internal queries, such as the connection alive test, in
  # their own transaction. Since these are typically read-only queries, it is rarely necessary to encapsulate them in
  # their own transaction. This property only applies if auto-commit is disabled.
  isolate-internal-queries = false

  # This property controls whether the pool can be suspended and resumed through JMX. This is useful for certain
  # failover automation scenarios. When the pool is suspended, calls to getConnection() will not timeout and will be
  # held until the pool is resumed.
  allow-pool-suspension = false

  # This property controls whether Connections obtained from the pool are in read-only mode by default.
  read-only = false

  # This property controls whether or not JMX Management Beans ("MBeans") are registered or not.
  register-mbeans = false

  # This property sets the default catalog for databases that support the concept of catalogs. If this property is not
  # specified, the default catalog defined by the JDBC driver is used.
  catalog = ""

  # This property sets a SQL statement that will be executed after every new connection creation before adding it to the
  # pool. If this SQL is not valid or throws an exception, it will be treated as a connection failure and the standard
  # retry logic will be followed.
  connection-init-sql = ""

  # Driver class name will be resolved through the DriverManager based solely on the url property, but for some older
  # drivers the driver-class-name must also be specified. Omit this property unless you get an obvious error message
  # indicating that the driver was not found.
  driver-class-name = ""

  # This property controls the default transaction isolation level of connections returned from the pool.
  # If this property is set to `null`, the default transaction isolation level defined by the JDBC driver is used. Only
  # use this property if you have specific isolation requirements that are common for all queries. The value of this
  # property is the constant name from the Connection class such as TRANSACTION_READ_COMMITTED,
  # TRANSACTION_REPEATABLE_READ, etc.
  transaction-isolation = ""

  # This property controls the maximum amount of time that a connection will be tested for aliveness. This value must be
  # less than the connection-timeout. The lowest accepted validation timeout is 1000ms (1s).
  validation-timeout = 5s

  # This property controls the amount of time that a connection can be out of the pool before a message is logged
  # indicating a possible connection leak. A value of 0s means leak detection is disabled. Lowest acceptable value for
  # enabling leak detection is 2000ms (2s).
  leak-detection-threshold = 0s
}
jwt-authenticator {
  key = ""
  algorithm = RS256
}
auth0-oauth2-client {
  base-uri = ""
  audience = ""
  client-id = ""
  client-secret = ""
}
sse-client {
  restart-policy {
    idle-timeout = 30s
    min-backoff = 1s
    max-backoff = 30s
    random-factor = 0.2
    max-restarts = -1
  }
}
netemera-oauth2-client {
  base-uri = ""
  audience = ""
  client-id = ""
  client-secret = ""
}